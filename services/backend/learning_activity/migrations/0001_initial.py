# Generated by Django 4.2.6 on 2023-11-08 00:07

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='MockInterview',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('mode', models.CharField(blank=True, choices=[('With Single Person', 'With Single Person'), ('With a Group of People (like a Panel)', 'With a Group of People (like a Panel)'), ('On a Website with Collection of Interview Questions', 'On a Website with Collection of Interview Questions'), ('I am quite confident about this.', 'I am quite confident about this.'), ('I can explain this to most people I know.', 'I can explain this to most people I know.')], max_length=128, null=True)),
                ('high_confidence_question_count', models.IntegerField(default=0, help_text='number of questions where you had high perceived confidence')),
                ('medium_confidence_question_count', models.IntegerField(default=0, help_text='number of questions where you had medium perceived confidence')),
                ('low_confidence_question_count', models.IntegerField(default=0, help_text='number of questions where you had low perceived confidence')),
                ('no_clue_question_count', models.IntegerField(default=0, help_text='number of questions where you had no clue, what was happening.')),
                ('total_question_count', models.IntegerField(default=0, help_text='total questions')),
                ('tti', models.CharField(default=0)),
                ('self_msg', models.TextField(blank=True)),
            ],
        ),
        migrations.CreateModel(
            name='ProgDSA',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(max_length=128, null=True)),
                ('link', models.CharField(blank=True, max_length=128, null=True)),
                ('slvd', models.BooleanField(default=False, help_text='was the problem solved?')),
                ('tts', models.IntegerField(default=0, help_text='time to solve the problem')),
                ('best_tc', models.IntegerField(choices=[(1, 'O(1)'), (2, 'O(log n)'), (3, 'O(sqrt(n))'), (4, 'O(n)'), (5, 'O(n logn)'), (6, 'O(n^2)'), (7, 'O(n^3)'), (8, 'O(n^k)'), (9, 'O(2^n)'), (10, 'O(n!)')], help_text='best time complexity possible')),
                ('achieved_tc', models.IntegerField(choices=[(1, 'O(1)'), (2, 'O(log n)'), (3, 'O(sqrt(n))'), (4, 'O(n)'), (5, 'O(n logn)'), (6, 'O(n^2)'), (7, 'O(n^3)'), (8, 'O(n^k)'), (9, 'O(2^n)'), (10, 'O(n!)')], help_text='achieved time complexity')),
                ('best_sc', models.IntegerField(choices=[(1, 'O(1)'), (2, 'O(log n)'), (3, 'O(sqrt(n))'), (4, 'O(n)'), (5, 'O(n logn)'), (6, 'O(n^2)'), (7, 'O(n^3)'), (8, 'O(n^k)'), (9, 'O(2^n)'), (10, 'O(n!)')], help_text='best space complexity possible')),
                ('achieved_sc', models.IntegerField(choices=[(1, 'O(1)'), (2, 'O(log n)'), (3, 'O(sqrt(n))'), (4, 'O(n)'), (5, 'O(n logn)'), (6, 'O(n^2)'), (7, 'O(n^3)'), (8, 'O(n^k)'), (9, 'O(2^n)'), (10, 'O(n!)')], help_text='achieved space complexity')),
                ('self_msg', models.TextField(blank=True)),
                ('perc_diff', models.IntegerField(choices=[(1, 'Lowest Difficulty'), (2, 'Low Difficulty'), (3, 'Moderate Difficulty'), (4, 'High Difficulty'), (5, 'Highest Difficulty')], help_text='precieved difficulty')),
            ],
        ),
        migrations.CreateModel(
            name='ProgSQL',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(max_length=128, null=True)),
                ('link', models.CharField(blank=True, max_length=128, null=True)),
                ('slvd', models.BooleanField(default=False, help_text='was the problem solved?')),
                ('tts', models.IntegerField(default=0, help_text='time to solve the problem')),
                ('self_msg', models.TextField(blank=True)),
                ('perc_diff', models.IntegerField(choices=[(1, 'Lowest Difficulty'), (2, 'Low Difficulty'), (3, 'Moderate Difficulty'), (4, 'High Difficulty'), (5, 'Highest Difficulty')], help_text='precieved difficulty')),
            ],
        ),
        migrations.CreateModel(
            name='ResearchPaper',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(max_length=128)),
                ('link', models.CharField(blank=True, max_length=128, null=True)),
                ('link_summarization', models.CharField(blank=True, max_length=128, null=True)),
                ('first_read_time', models.IntegerField(default=0, help_text='time to read for first pass')),
                ('final_read_time', models.IntegerField(default=0, help_text='total time to read for including all passes')),
                ('perc_unde', models.IntegerField(choices=[(1, 'What did I just read?'), (2, 'I kind of get it, but not really'), (3, 'Yeah, I think I understand this.'), (4, 'I am quite confident about this.'), (5, 'I can explain this to most people I know.')], help_text='percieved level of understanding after final pass and summarization')),
                ('self_msg', models.TextField(blank=True)),
                ('perc_diff', models.IntegerField(choices=[(1, 'Lowest Difficulty'), (2, 'Low Difficulty'), (3, 'Moderate Difficulty'), (4, 'High Difficulty'), (5, 'Highest Difficulty')], help_text='precieved difficulty')),
            ],
        ),
    ]
