"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 4.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""
import os
import io
import json
import base64
import environ
from pathlib import Path
from datetime import timedelta
from google.cloud import secretmanager
from google.oauth2 import service_account


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

if os.getenv("DB_PASSWORD") == None:
    print("Fetching secrets from Google Secret Manager")
    env = environ.Env()

    cred_json = base64.b64decode(os.environ["GOOGLE_CREDENTIALS"]).decode("utf-8")
    cred_info = json.loads(cred_json)
    credentials = service_account.Credentials.from_service_account_info(cred_info)
    client = secretmanager.SecretManagerServiceClient(credentials=credentials)

    if os.getenv("ENV") == "prod":
        name = "projects/{}/secrets/{}/versions/latest".format(
            os.getenv("GOOGLE_CLOUD_PROJECT"), "prod-secrets"
        )
    else:
        name = "projects/{}/secrets/{}/versions/latest".format(
            os.getenv("GOOGLE_CLOUD_PROJECT"), "staging-secrets"
        )

    response = client.access_secret_version(name=name).payload.data.decode("UTF-8")
    env.read_env(io.StringIO(response))

    SECRET_KEY = env("DJANGO_SECRET_KEY")
    DEBUG = env.bool("DJANGO_DEBUG", default=False)
    HASHIDS_SALT = env("HASHIDS_SALT")
    HASHIDS_MIN_LENGTH = env("HASHIDS_MIN_LENGTH")
    OPENAI_API_KEY = env("OPENAI_API_KEY")
    DB_NAME = env("DB_NAME")
    DB_USER = env("DB_USER")
    DB_PASSWORD = env("DB_PASSWORD")
    DB_HOST = env("DB_HOST")
    DB_PORT = env("DB_PORT")
    QDRANT_HOST = env("QDRANT_HOST")
    QDRANT_API_KEY = env("QDRANT_API_KEY")
    print("Secrets fetched successfully,", QDRANT_HOST, "is the value of QDRANT_HOST")
else:
    print("Fetching secrets from environment variables")
    SECRET_KEY = os.environ.get("DJANGO_SECRET_KEY", None)
    DEBUG = os.environ.get("DJANGO_DEBUG", False)
    HASHIDS_SALT = os.environ.get("HASHIDS_SALT", None)
    HASHIDS_MIN_LENGTH = os.environ.get("HASHIDS_MIN_LENGTH", None)
    OPENAI_API_KEY = os.environ.get("OPENAI_API_KEY", None)
    DB_NAME = os.environ.get("DB_NAME", None)
    DB_USER = os.environ.get("DB_USER", None)
    DB_PASSWORD = os.environ.get("DB_PASSWORD", None)
    DB_HOST = os.environ.get("DB_HOST", None)
    DB_PORT = os.environ.get("DB_PORT", None)
    QDRANT_HOST = os.environ.get("QDRANT_HOST", None)
    QDRANT_API_KEY = os.environ.get("QDRANT_API_KEY", None)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/


# SECURITY WARNING: don't run with debug turned on in production!


ALLOWED_HOSTS = [
    "studylens-backend-staging-be188a56c357.herokuapp.com",
    "localhost",
]


# Application definition

INSTALLED_APPS = [
    "grappelli",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "corsheaders",
    "rest_framework",
    "studylens_models",
    "django_rest_passwordreset",
    "base",
    "users",
    "resources",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
]

CORS_ALLOW_CREDENTIALS = True
CORS_ALLOWED_ORIGINS = [
    "http://localhost",
    "http://localhost:8080",
    "https://studylens-backend-staging-be188a56c357.herokuapp.com",
]


# ELASTICSEARCH_DSL = {
#     "default": {"hosts": "http://elasticsearch:9200"},
# }

ROOT_URLCONF = "backend.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "backend.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases


DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql_psycopg2",
        "NAME": DB_NAME,
        "USER": DB_USER,
        "PASSWORD": DB_PASSWORD,
        "HOST": DB_HOST,
        "PORT": DB_PORT,
    }
}

if os.getenv("ENV") == "dev":
    EMAIL_BACKEND = "django.core.mail.backends.console.EmailBackend"
else:
    EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

REST_FRAMEWORK = {
    "DEFAULT_RENDERER_CLASSES": [
        "rest_framework.renderers.JSONRenderer",
        "rest_framework.renderers.BrowsableAPIRenderer",
    ],
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    ),
    "DEFAULT_PAGINATION_CLASS": "base.pagination.StandardResultsSetPagination",
}

AUTH_USER_MODEL = "users.Learner"

SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(hours=1),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=20),
    "ROTATE_REFRESH_TOKENS": False,
    "BLACKLIST_AFTER_ROTATION": True,
    "ALGORITHM": "HS256",
    "SIGNING_KEY": SECRET_KEY,
    "VERIFYING_KEY": None,
    "AUDIENCE": None,
    "ISSUER": None,
    "AUTH_HEADER_TYPES": ("Bearer",),
    "USER_ID_FIELD": "id",
    "USER_ID_CLAIM": "user_id",
    "AUTH_TOKEN_CLASSES": ("rest_framework_simplejwt.tokens.AccessToken",),
    "TOKEN_TYPE_CLAIM": "token_type",
    "JTI_CLAIM": "jti",
    "TOKEN_USER_CLASS": "rest_framework_simplejwt.models.TokenUser",
    "SLIDING_TOKEN_REFRESH_EXP_CLAIM": "refresh_exp",
    "SLIDING_TOKEN_LIFETIME": timedelta(days=10),
    "SLIDING_TOKEN_REFRESH_LIFETIME": timedelta(days=20),
}


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")
STATIC_URL = "/static/"
STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
